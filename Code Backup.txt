let board1count=0;
let board2count=0;
let board1W=[];
let board1B=[];
let turn1=1;
let turn2=1;
let select1=-1;
let select2=-1;
let moves1=[];
let moves2=[];
let move1=-1;
let move2=-1;
let players1=[];
let players2=[];
let kinglegal=[-9,-8,-7,-1,1,7,8,9];
let pieceKey=["R","N","B","Q","K","B","N","R","P","P","P","P","P","P","P","P"];
let movetest=-1;
let gemcaps=[20,80,180,320,500,720,980];
var ships=[];
var Shadow_X_1_303 = '{"name":"Shadow X-1","level":3,"model":3,"size":0.8,"zoom":0.6,"specs":{"shield":{"capacity":[90,130],"reload":[3,6]},"generator":{"capacity":[50,80],"reload":[12,16]},"ship":{"mass":70,"speed":[120,155],"rotation":[35,60],"acceleration":[130,150]}},"bodies":{"main":{"section_segments":10,"offset":{"x":0,"y":0,"z":0},"position":{"x":[0,0,0,0,0,0,0,0,0,0,0,0],"y":[-100,-98,-95,-70,-40,0,40,70,80,90,100],"z":[0,0,0,0,0,0,0,0,0,0,0]},"width":[0,10,20,30,40,20,20,40,40,40,20,0],"height":[0,4,4,20,20,10,10,15,15,15,10,10],"texture":[12,5,63,4,4,63,4,4,5]},"back":{"section_segments":10,"offset":{"x":0,"y":0,"z":0},"position":{"x":[0,0,0,0,0],"y":[90,95,100,105,90],"z":[0,0,0,0,0]},"width":[10,15,18,19,2],"height":[3,5,7,8,2],"texture":[63],"propeller":true},"cockpit":{"section_segments":8,"offset":{"x":0,"y":-25,"z":15},"position":{"x":[0,0,0,0,0,0],"y":[-45,-40,-25,0,5],"z":[0,0,0,0,0,0]},"width":[0,10,15,13,0],"height":[0,10,15,5,0],"texture":[9]},"laser":{"section_segments":10,"offset":{"x":70,"y":10,"z":-20},"position":{"x":[0,0,0,0,0,0,0,0,0,0],"y":[-20,-15,0,10,20,25,30,40,70,60],"z":[0,0,0,0,0,0,0,0,0,0]},"width":[0,10,15,15,15,10,10,15,5,0],"height":[0,10,15,15,15,10,10,15,5,0],"texture":[3,4,10,3],"propeller":true,"laser":{"damage":[3,4],"rate":6,"type":1,"speed":[180,210],"number":1}}},"wings":{"top":{"offset":{"x":0,"y":50,"z":5},"length":[30],"width":[70,30],"angle":[90],"position":[0,50],"texture":[4],"bump":{"position":10,"size":15}},"side_joins":{"offset":{"x":0,"y":30,"z":-3},"length":[100],"width":[100,40],"angle":[0],"position":[-50,50],"texture":[4],"bump":{"position":10,"size":10}}},"typespec":{"name":"Shadow X-1","level":3,"model":3,"code":303,"specs":{"shield":{"capacity":[90,130],"reload":[3,6]},"generator":{"capacity":[50,80],"reload":[12,16]},"ship":{"mass":70,"speed":[120,155],"rotation":[35,60],"acceleration":[130,150]}},"shape":[1.6,1.582,1.552,1.313,1.138,1.009,0.919,0.75,0.688,0.708,0.733,1.157,1.297,1.359,1.392,1.431,1.696,1.975,2.192,2.258,1.661,1.429,1.58,1.628,1.705,1.835,1.705,1.628,1.58,1.429,1.661,2.258,2.192,1.975,1.696,1.431,1.392,1.359,1.297,1.157,0.733,0.708,0.688,0.75,0.919,1.009,1.138,1.313,1.552,1.582],"lasers":[{"x":1.12,"y":-0.16,"z":-0.32,"angle":0,"damage":[3,4],"rate":6,"type":1,"speed":[180,210],"number":1,"spread":0,"error":0,"recoil":0},{"x":-1.12,"y":-0.16,"z":-0.32,"angle":0,"damage":[3,4],"rate":6,"type":1,"speed":[180,210],"number":1,"spread":0,"error":0,"recoil":0}],"radius":2.258}}';
ships.push(Shadow_X_1_303);
map=
"9  8  88  8   8  88  8    8  88  8   8  88  8  9\n"+
"9 8  8  8  8 8  8  8  8  8  8  8  8 8  8  8  8 9\n"+
"9   8    8  8  8    8  88  8    8  8  8    8   9\n"+
"9  8  88  8   8  88  8    8  88  8   8  88  8  9\n"+
"9 8  8  8  8 8  8  8  8  8  8  8  8 8  8  8  8 9\n"+
"9                                              9\n"+
"999999999999999999999999999999999999999999999999\n"+
"999999999999999999999999999999999999999999999999\n"+
"9    9 9            999999999999999     99999999\n"+
"9    9 9            9999999999999         999999\n"+
"9    9 9            999999999999           99999\n"+
"9    9 9            99999999999             9999\n"+
"9    9 9            999    999               999\n"+
"9    9 9            999    99                 99\n"+
"9    999            9 9    99                 99\n"+
"9    999            9 9    9                   9\n"+
"99999999            9 9    9                   9\n"+
"99999999            9 9    9                   9\n"+
"99999999            9 9    9                   9\n"+
"99999999            9 9    9                   9\n"+
"99999999999999999999999999999                 99\n"+
"99999999999999999999999999999                 99\n"+
"99999999     99999999      999               999\n"+
"999999         999999      9999             9999\n"+
"99999           99999      99999           99999\n"+
"9999             9999      999999         999999\n"+
"999               999      99999999     99999999\n"+
"99                 99      999999999999999999999\n"+
"99                 99999999999999999999999999999\n"+
"9                   9    9 9            99999999\n"+
"9                   9    9 9            99999999\n"+
"9                   9    9 9            99999999\n"+
"9                   9    9 9            99999999\n"+
"9                   9    9 9            999    9\n"+
"99                 99    9 9            999    9\n"+
"99                 99    999            9 9    9\n"+
"999               999    999            9 9    9\n"+
"9999             99999999999            9 9    9\n"+
"99999           999999999999            9 9    9\n"+
"999999         9999999999999            9 9    9\n"+
"99999999     999999999999999            9 9    9\n"+
"999999999999999999999999999999999999999999999999\n"+
"9                                              9\n"+
"9 8  8  8  8 8  8  8  8  8  8  8  8 8  8  8  8 9\n"+
"9  8  88  8   8  88  8    8  88  8   8  88  8  9\n"+
"9   8    8  8  8    8  88  8    8  8  8    8   9\n"+
"9 8  8  8  8 8  8  8  8  8  8  8  8 8  8  8  8 9\n"+
"9  8  88  8   8  88  8    8  88  8   8  88  8  9\n"+
"9  8  88  8   8  88  8    8  88  8   8  88  8  9"
;

const VOCABULARY = [
    // 1
    {text: "You",       icon: "\u004e", key: "O"},
    {text: "Me",        icon: "\u004f", key: "E"},
    {text: "Hmm",       icon: "\u004b", key: "Q"},
    {text: "Yes",       icon: "\u004c", key: "Y"},
    // 2
    {text: "No",        icon: "\u004d", key: "N"},
    {text: "Hello",     icon: "\u0045", key: "H"},
    {text: "Sorry",     icon: "\u00a1", key: "S"},
    {text: "Thanks",    icon: "\u0041", key: "X"},
    // 3
    {text: "Follow",    icon: "\u0050", key: "F"},
    {text: "Check",     icon: "\u004a", key: "B"},
    {text: "Checkmate", icon: "\u005b", key: "M"},
    {text: "Resign",    icon: "\u003b", key: "Z"},
    // 4
    {text: "Good Game", icon: "\u00a3", key: "G"}
];
                                                                                //button definitions
var Select_button = {
  id: "Select",
  position: [76, 1, 3.5, 5.5],
  clickable: true,
  shortcut: "W",
  visible: true,
  components: [
    { type:"box",position:[0,0,100,100],fill:"#456",stroke:"#CDE",width:2},
    { type: "text",position:[10,35,80,30],value:"Select",color:"#CDE"},
    { type: "text",position:[20,70,60,20],value:"[W]",color:"#CDE"}
    ]
};

var Move_button = {
  id: "Move",
  position: [72, 1, 3.5, 5.5],
  clickable: true,
  shortcut: "T",
  visible: true,
  components: [
    { type:"box",position:[0,0,100,100],fill:"#456",stroke:"#CDE",width:2},
    { type: "text",position:[10,35,80,30],value:"Move",color:"#CDE"},
    { type: "text",position:[20,70,60,20],value:"[T]",color:"#CDE"}
    ]
};

var Reset_button = {
  id: "Reset",
  position: [68, 1, 3.5, 5.5],
  clickable: true,
  shortcut: "",
  visible: true,
  components: [
    { type:"box",position:[0,0,100,100],fill:"#456",stroke:"#CDE",width:2},
    { type: "text",position:[10,35,80,30],value:"RESET",color:"#CDE"},
    { type: "text",position:[20,70,60,20],value:"[CLICK]",color:"#CDE"}
    ]
};
                                                                                //custom objects
var BSquares = {
  id: "BSquares",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/squares.obj",
  emissiveColor: 0x553311
};

var WSquares = {
  id: "WSquares",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/squares.obj",
  emissiveColor: 0xFFF0F0
};

var Entry = {
  id: "entry",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-aim-training/refs/heads/main/entry.obj",
  emissiveColor: 0xFFF0F0
};

var blocked = {
  id: "blocked",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-aim-training/refs/heads/main/blocked.obj",
  emissiveColor: 0xF0F0FF
};

var select = {
  id: "select",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-aim-training/refs/heads/main/entry.obj",
  emissiveColor: 0x1ebf19
};

var possible ={
  id: "possible",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-aim-training/refs/heads/main/entry.obj",
  emissiveColor: 0x0300c7
};

var WR = {
  id: "WR",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/R.obj",
  emissiveColor: 0xFFF0F0
};

var WN = {
  id: "WN",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/Kt.obj",
  emissiveColor: 0xFFF0F0
};

var WB = {
  id: "WB",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/B.obj",
  emissiveColor: 0xFFF0F0
};

var WQ = {
  id: "WQ",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/Q.obj",
  emissiveColor: 0xFFF0F0
};

var WK = {
  id: "WK",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/K.obj",
  emissiveColor: 0xFFF0F0
};

var WP = {
  id: "WP",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/P.obj",
  emissiveColor: 0xFFF0F0
};

var BR = {
  id: "BR",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/R.obj",
  emissiveColor: 0x3b3b3b
};

var BN = {
  id: "BN",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/Kt.obj",
  emissiveColor: 0x3b3b3b
};

var BB = {
  id: "BB",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/B.obj",
  emissiveColor: 0x3b3b3b
};

var BQ = {
  id: "BQ",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/Q.obj",
  emissiveColor: 0x3b3b3b
};

var BK = {
  id: "BK",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/K.obj",
  emissiveColor: 0x3b3b3b
};

var BP = {
  id: "BP",
  obj: "https://raw.githubusercontent.com/Eman-Bman/starblast-chess-dueling/refs/heads/main/P.obj",
  emissiveColor: 0x3b3b3b
};
                                                                                //custom functions
var Board1Reset = function() {
  board1B=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
  board1W=[56,57,58,59,60,61,62,63,48,49,50,51,52,53,54,55];
  turn1=1;
  // board1W=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];
};

var Select = function(ship)
{
  if (turn1==1 && ship.name==players1[0])
  {
    select1=8*(14-Math.floor(ship.y/10))+(14+Math.floor(ship.x/10));
    moves1=[];
    if (board1W.includes(select1) === false) {
      select1=-1;
    }
    else {
      if (pieceKey[board1W.indexOf(select1)]=="P") {
        if (select1>=48 && select1 <=55 && board1B.includes(select1-16)===false && board1B.includes(select1-8)===false && board1W.includes(select1-16)===false && board1W.includes(select1-8)===false) {
          moves1=moves1.concat([select1-8,select1-16]);
        }
        else if (select1>7 && board1B.includes(select1-8)===false && board1W.includes(select1-8)===false) {
          moves1=moves1.concat([select1-8]);
        }
        if (board1B.includes(select1-7) && select1%8!=7) {
          moves1=moves1.concat([select1-7]);
        }
        if (board1B.includes(select1-9) && select1%8!==0) {
          moves1=moves1.concat([select1-9]);
        }
      }
      if (pieceKey[board1W.indexOf(select1)]=="R" || pieceKey[board1W.indexOf(select1)]=="Q" || pieceKey[board1W.indexOf(select1)]=="K") {
        movetest=select1+8;
        while (movetest<=63 && board1W.includes(movetest)===false) {
          if (board1B.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest+8;
        }
        movetest=select1-8;
        while (movetest>=0 && board1W.includes(movetest)===false) {
          if (board1B.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest-8;
        }
        movetest=select1+1;
        while (movetest%8!==0 && board1W.includes(movetest)===false) {
          if (board1B.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest+1;
        }
        movetest=select1-1;
        while (movetest%8!==7 && board1W.includes(movetest)===false) {
          if (board1B.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest-1;
        }
      }
      if (pieceKey[board1W.indexOf(select1)]=="B" || pieceKey[board1W.indexOf(select1)]=="Q" || pieceKey[board1W.indexOf(select1)]=="K") {
        movetest=select1+9;
        while (movetest<=63 && movetest%8!==0 && board1W.includes(movetest)===false) {
          if (board1B.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest+9;
        }
        movetest=select1-9;
        while (movetest>=0 && movetest%8!==7 && board1W.includes(movetest)===false) {
          if (board1B.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest-9;
        }
        movetest=select1-7;
        while (movetest>=0 && movetest%8!==0 && board1W.includes(movetest)===false) {
          if (board1B.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest-7;
        }
        movetest=select1+7;
        while (movetest<=63 && movetest%8!==7 && board1W.includes(movetest)===false) {
          if (board1B.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest+7;
        }
      }
      if (pieceKey[board1W.indexOf(select1)]=="K") {
        for (let i=moves1.length; i>=0; i--) {
          if (kinglegal.includes(moves1[i]-select1) === false) {
            moves1.splice(i,1)
          }
          if (select1%8===0 && moves1[i]%8==7)
          {
            moves1.splice(i,1)
          }
          if (select1%8==7 && moves1[i]%8===0)
          {
            moves1.splice(i,1)
          }
        }
      }
      if (pieceKey[board1W.indexOf(select1)]=="N") {
        if (select1 % 8 >= 1 && select1 >= 16 && board1W.includes(select1 - 17) === false) {
          moves1.push(select1 - 17);
        }
        if (select1 % 8 >= 2 && select1 >= 8 && board1W.includes(select1 - 10) === false) {
          moves1.push(select1 - 10);
        }
        if (select1 % 8 >= 2 && select1 <= 55 && board1W.includes(select1 + 6) === false) {
          moves1.push(select1 + 6);
        }
        if (select1 % 8 >= 1 && select1 <= 47 && board1W.includes(select1 + 15) === false) {
          moves1.push(select1 + 15);
        }
        if (select1 % 8 <= 6 && select1 >= 16 && board1W.includes(select1 - 15) === false) {
          moves1.push(select1 - 15);
        }
        if (select1 % 8 <= 5 && select1 >= 8 && board1W.includes(select1 - 6) === false) {
          moves1.push(select1 - 6);
        }
        if (select1 % 8 <= 5 && select1 <= 55 && board1W.includes(select1 + 10) === false) {
          moves1.push(select1 + 10);
        }
        if (select1 % 8 <= 6 && select1 <= 47 && board1W.includes(select1 + 17) === false) {
          moves1.push(select1 + 17);
        }
      }
    }
    echo(moves1)
    customObj();
  }
  else if (turn1==2 && ship.name==players1[1])
  {
    select1=8*(14-Math.floor(ship.y/10))+(14+Math.floor(ship.x/10));
    moves1=[]
    if (board1B.includes(select1) === false) {
      select1=-1;
    }
    else {
      if (pieceKey[board1B.indexOf(select1)]=="P") {
        if (select1>=8 && select1 <=15 && board1B.includes(select1+16)===false && board1B.includes(select1+8)===false && board1W.includes(select1+16)===false && board1W.includes(select1+8)===false) {
          moves1=moves1.concat([select1+8,select1+16]);
        }
        else if (select1<=55 && board1B.includes(select1+8)===false && board1W.includes(select1+8)===false) {
          moves1=moves1.concat([select1+8]);
        }
        if (board1W.includes(select1+9) && select1%8!=7) {
          moves1=moves1.concat([select1+9]);
        }
        if (board1W.includes(select1+7) && select1%8!==0) {
          moves1=moves1.concat([select1+7]);
        }
      }
      if (pieceKey[board1B.indexOf(select1)]=="R" || pieceKey[board1B.indexOf(select1)]=="Q" || pieceKey[board1B.indexOf(select1)]=="K") {
        movetest=select1+8;
        while (movetest<=63 && board1B.includes(movetest)===false) {
          if (board1W.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest+8;
        }
        movetest=select1-8;
        while (movetest>=0 && board1B.includes(movetest)===false) {
          if (board1W.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest-8;
        }
        movetest=select1+1;
        while (movetest%8!==0 && board1B.includes(movetest)===false) {
          if (board1W.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest+1;
        }
        movetest=select1-1;
        while (movetest%8!==7 && board1B.includes(movetest)===false) {
          if (board1W.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest-1;
        }
      }
      if (pieceKey[board1B.indexOf(select1)]=="B" || pieceKey[board1B.indexOf(select1)]=="Q" || pieceKey[board1B.indexOf(select1)]=="K") {
        movetest=select1+9;
        while (movetest<=63 && movetest%8!==0 && board1B.includes(movetest)===false) {
          if (board1W.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest+9;
        }
        movetest=select1-9;
        while (movetest>=0 && movetest%8!==7 && board1B.includes(movetest)===false) {
          if (board1W.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest-9;
        }
        movetest=select1-7;
        while (movetest>=0 && movetest%8!==0 && board1B.includes(movetest)===false) {
          if (board1W.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest-7;
        }
        movetest=select1+7;
        while (movetest<=63 && movetest%8!==7 && board1B.includes(movetest)===false) {
          if (board1W.includes(movetest)===true) {
            moves1=moves1.concat(movetest);
            break;
          }
          moves1=moves1.concat(movetest);
          movetest=movetest+7;
        }
      }
      if (pieceKey[board1B.indexOf(select1)]=="K") {
        for (let i=moves1.length; i>=0; i--) {
          if (kinglegal.includes(moves1[i]-select1) === false) {
            moves1.splice(i,1)
          }
          if (select1%8===0 && moves1[i]%8==7)
          {
            moves1.splice(i,1)
          }
          if (select1%8==7 && moves1[i]%8===0)
          {
            moves1.splice(i,1)
          }
        }
      }
      if (pieceKey[board1B.indexOf(select1)]=="N") {
        if (select1 % 8 >= 1 && select1 >= 16 && board1B.includes(select1 - 17) === false) {
          moves1.push(select1 - 17);
        }
        if (select1 % 8 >= 2 && select1 >= 8 && board1B.includes(select1 - 10) === false) {
          moves1.push(select1 - 10);
        }
        if (select1 % 8 >= 2 && select1 <= 55 && board1B.includes(select1 + 6) === false) {
          moves1.push(select1 + 6);
        }
        if (select1 % 8 >= 1 && select1 <= 47 && board1B.includes(select1 + 15) === false) {
          moves1.push(select1 + 15);
        }
        if (select1 % 8 <= 6 && select1 >= 16 && board1B.includes(select1 - 15) === false) {
          moves1.push(select1 - 15);
        }
        if (select1 % 8 <= 5 && select1 >= 8 && board1B.includes(select1 - 6) === false) {
          moves1.push(select1 - 6);
        }
        if (select1 % 8 <= 5 && select1 <= 55 && board1B.includes(select1 + 10) === false) {
          moves1.push(select1 + 10);
        }
        if (select1 % 8 <= 6 && select1 <= 47 && board1B.includes(select1 + 17) === false) {
          moves1.push(select1 + 17);
        }
      }
    }
    echo(moves1)
    customObj();
  }
};

var Move = function(ship)
{
  if (turn1==1) {
    move1=8*(14-Math.floor(ship.y/10))+(14+Math.floor(ship.x/10));
    if (moves1.includes(move1)) {
      board1W[board1W.indexOf(select1)]=move1;
      if (board1B.includes(move1)) {
        board1B[board1B.indexOf(move1)]=-1;
      }
      turn1=2;
      moves1=[];
      select1=-1;
      customObj();
    }
  }
  else if (turn1==2) {
    move1=8*(14-Math.floor(ship.y/10))+(14+Math.floor(ship.x/10));
    if (moves1.includes(move1)) {
      board1B[board1B.indexOf(select1)]=move1;
      if (board1W.includes(move1)) {
        board1W[board1W.indexOf(move1)]=-1;
      }
      turn1=1;
      moves1=[];
      select1=-1;
      customObj();
    }
  }
};

var customObj = function()                                                      //place custom objects
{
  game.removeObject();
  
  game.setObject({
  id: "entry1",
  type: Entry,
  position: {x:-20,y:20,z:0},
  rotation: {x:0,y:0,z:0},
  scale: {x:1,y:1,z:1}
  }) ;
  
  game.setObject({
  id: "entry2",
  type: Entry,
  position: {x:20,y:-20,z:0},
  rotation: {x:0,y:0,z:0},
  scale: {x:1,y:1,z:1}
  }) ;
  
  game.setObject({
  id: "darkboard1",
  type: BSquares,
  position: {x:-100,y:110,z:0},
  rotation: {x:0,y:0,z:0},
  scale: {x:1,y:1,z:1}
  }) ;
  
  game.setObject({
  id: "lightboard1",
  type: WSquares,
  position: {x:-100,y:110,z:0},
  rotation: {x:0,y:0,z:(3.14/2)},
  scale: {x:1,y:1,z:1}
  }) ;
  
  game.setObject({
  id: "darkboard2",
  type: BSquares,
  position: {x:100,y:-100,z:0},
  rotation: {x:0,y:0,z:0},
  scale: {x:1,y:1,z:1}
  }) ;
  
  game.setObject({
  id: "lightboard2",
  type: WSquares,
  position: {x:100,y:-100,z:0},
  rotation: {x:0,y:0,z:(3.14/2)},
  scale: {x:1,y:1,z:1}
  }) ;
  
  for (let i=0;i<17;i++)
  {
    let pos=board1W[i];
    if (pos>-1 && pos<64)
    {
      if (pieceKey[i] == "R") {
        game.setObject({
        id: `W${i}`,
        type: WR,
        position: {x:-135+10*(pos%8),y:145-10*(Math.floor(pos/8)),z:0},
        rotation: {x:0,y:0,z:0},
        scale: {x:0.3,y:0.3,z:1}
        });
      }
        if (pieceKey[i] == "N") {
        game.setObject({
        id: `W${i}`,
        type: WN,
        position: {x:-135+10*(pos%8),y:145-10*(Math.floor(pos/8)),z:0},
        rotation: {x:0,y:0,z:0},
        scale: {x:0.3,y:0.3,z:1}
        });
      }
      if (pieceKey[i] == "B") {
        game.setObject({
        id: `W${i}`,
        type: WB,
        position: {x:-135+10*(pos%8),y:145-10*(Math.floor(pos/8)),z:0},
        rotation: {x:0,y:0,z:0},
        scale: {x:0.3,y:0.3,z:1}
        });
      }
      if (pieceKey[i] == "K") {
        game.setObject({
        id: `W${i}`,
        type: WK,
        position: {x:-135+10*(pos%8),y:145-10*(Math.floor(pos/8)),z:0},
        rotation: {x:0,y:0,z:0},
        scale: {x:0.3,y:0.3,z:1}
        });
      }
      if (pieceKey[i] == "Q") {
        game.setObject({
        id: `W${i}`,
        type: WQ,
        position: {x:-135+10*(pos%8),y:145-10*(Math.floor(pos/8)),z:0},
        rotation: {x:0,y:0,z:0},
        scale: {x:0.3,y:0.3,z:1}
        });
      }
      if (pieceKey[i] == "P") {
        game.setObject({
        id: `W${i}`,
        type: WP,
        position: {x:-135+10*(pos%8),y:145-10*(Math.floor(pos/8)),z:0},
        rotation: {x:0,y:0,z:0},
        scale: {x:0.3,y:0.3,z:1}
        });
      }
    }
  }
  
  for (let i=0;i<17;i++)
  {
    let pos=board1B[i];
    if (pos>-1 && pos<64)
    {
      if (pieceKey[i] == "R") {
        game.setObject({
        id: `B${i}`,
        type: BR,
        position: {x:-135+10*(pos%8),y:145-10*(Math.floor(pos/8)),z:0},
        rotation: {x:0,y:0,z:0},
        scale: {x:0.3,y:0.3,z:1}
        });
      }
        if (pieceKey[i] == "N") {
        game.setObject({
        id: `B${i}`,
        type: BN,
        position: {x:-135+10*(pos%8),y:145-10*(Math.floor(pos/8)),z:0},
        rotation: {x:0,y:0,z:0},
        scale: {x:0.3,y:0.3,z:1}
        });
      }
      if (pieceKey[i] == "B") {
        game.setObject({
        id: `B${i}`,
        type: BB,
        position: {x:-135+10*(pos%8),y:145-10*(Math.floor(pos/8)),z:0},
        rotation: {x:0,y:0,z:0},
        scale: {x:0.3,y:0.3,z:1}
        });
      }
      if (pieceKey[i] == "K") {
        game.setObject({
        id: `B${i}`,
        type: BK,
        position: {x:-135+10*(pos%8),y:145-10*(Math.floor(pos/8)),z:0},
        rotation: {x:0,y:0,z:0},
        scale: {x:0.3,y:0.3,z:1}
        });
      }
      if (pieceKey[i] == "Q") {
        game.setObject({
        id: `B${i}`,
        type: BQ,
        position: {x:-135+10*(pos%8),y:145-10*(Math.floor(pos/8)),z:0},
        rotation: {x:0,y:0,z:0},
        scale: {x:0.3,y:0.3,z:1}
        });
      }
      if (pieceKey[i] == "P") {
        game.setObject({
        id: `B${i}`,
        type: BP,
        position: {x:-135+10*(pos%8),y:145-10*(Math.floor(pos/8)),z:0},
        rotation: {x:0,y:0,z:0},
        scale: {x:0.3,y:0.3,z:1}
        });
      }
    }
  }
  
  for (let i=0;i<moves1.length;i++) {
    game.setObject({
    id: `move1${i}`,
    type: possible,
    position: {x:-135+10*(moves1[i]%8),y:145-10*(Math.floor(moves1[i]/8)),z:0},
    rotation: {x:0,y:0,z:0},
    scale: {x:0.5,y:0.5,z:1}
    }) ;
  }
  
  if (select1>-1 && select1<64) {
    game.setObject({
    id: "selectC1",
    type: select,
    position: {x:-135+10*(select1%8),y:145-10*(Math.floor(select1/8)),z:0},
    rotation: {x:0,y:0,z:0},
    scale: {x:0.5,y:0.5,z:1}
    }) ;
  }
};

this.options = {                                                                //game start options
  soundtrack: "argon.mp3",
  root_mode: "",
  map_name: "Chess-Dueling V0.1",
  custom_map: map,
  vocabulary: VOCABULARY,
  ships: ships,
  radar_zoom: 1,
  weapons_store: false,
  asteroids_strength: 0.01,
  starting_ship:800,
  map_size: 48
};

this.tick = function(game) {
//                                                                              //single time events:
  if (game.step==60)                                                            //set intial objects
  {
    Board1Reset();
    customObj();
  }
  if (game.step%60===0)
  {
    for (let i=0;i<game.ships.length;i++)
    {
      if (((game.ships[i].x+20)*(game.ships[i].x+20))+((game.ships[i].y-20)*(game.ships[i].y-20))<=100)
      {
        if (board1count===0)
        {
          game.ships[i].set({x:-210,y:95,shield:300,crystals:719});
          board1count=1;
          players1.push(game.ships[i].name)
        }
        else if (board1count==1)
        {
          game.ships[i].set({x:10,y:125,shield:300,crystals:719});
          board1count=2;
          players1.push(game.ships[i].name)
        }
      }
    }
    for (let i=0;i<game.ships.length;i++)                                       //install buttons
    {
      let ship = game.ships[i] ;
      if (!ship.custom.Select_button_installed)
      {
        ship.custom.Select_button_installed = true;
        ship.setUIComponent(Select_button);
      }
      if (!ship.custom.Move_button_installed)
      {
        ship.custom.Move_button_installed = true;
        ship.setUIComponent(Move_button);
      }
      if (!ship.custom.Reset_button_installed && ship.name == "THE SHADOW")
      {
        ship.custom.Reset_button_installed = true;
        ship.setUIComponent(Reset_button);
      }
    }
  }
  if (game.step%10===0)                           //gem cap
  {
    for (var j=0;j<game.ships.length;j++)
    {
      // echo(game.ships[j].crystals>=gemcaps[game.ships[j].type.toString().charAt(0)-1])
      if (game.ships[j].crystals>=gemcaps[game.ships[j].type.toString().charAt(0)-1])
      {
        game.ships[j].set({crystals:gemcaps[game.ships[j].type.toString().charAt(0)-1]-1});
      }
    }
  }
};

this.event = function(event,game) {
  let ship = event.ship;
  let killer = event.killer;
  let ast = event.asteroid;
  switch (event.name){
    case "ui_component_clicked":
      var component = event.id ;
      if (component == "Select")
      {
        Select(ship);
      }
      if (component == "Move")
      {
        Move(ship);
      }
      if (component = "Reset") {
        Board1Reset();
      }
      break ;
    case "ship_spawned":
      echo("new spawn");
      ship.set({x:0,y:0,type:303, stats:88888888, crystals:719, shield: 1000});
      break ;
    case "ship_destroyed":
      echo("new death");
      break;
  }
} ;
